# This values.yaml file creates the resources for facebook/opt-125m 

multinode: false          # If true, creates LWS instead of deployments  
inferencePool: true 
inferenceModel: true 
httpRoute: true 

routing: 
  # This is the model name for the OpenAI request
  modelName: facebook/opt-125m
  servicePort: 8000   # Sidecar listens on this port for requests. If there's no sidecar, the request goes here
  proxy:
    image: ghcr.io/llm-d/llm-d-routing-sidecar:0.0.6
    targetPort: 8200
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: inference-gateway

modelArtifacts:
  uri: "hf://facebook/opt-125m"

# describe decode pods
decode:
  enableService: false
  replicas: 1
  containers:
  - name: "vllm"
    image: "ghcr.io/llm-d/llm-d:0.0.8"  
    command: 
      - vllm
      - serve
    args:
      - "facebook/opt-125m"
      - "--port"
      - "8200"  # internalPort
      - "--enforce-eager"
      - "--kv-transfer-config"
      - '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
    env:
      - name: CUDA_VISIBLE_DEVICES
        value: "0"
      - name: UCX_TLS
        value: "cuda_ipc,cuda_copy,tcp"
      - name: HF_HOME
        value: /model-cache
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VLLM_NIXL_SIDE_CHANNEL_PORT
        value: "5557"
      - name: VLLM_LOGGING_LEVEL
        value: DEBUG
    ports:
      - containerPort: 5557
        protocol: TCP
    resources:
      limits:
        memory: 16Gi
        cpu: "16"
        nvidia.com/gpu: "1"
      requests:
        cpu: "16"
        memory: 16Gi
        nvidia.com/gpu: "1"
    mountModelVolume: true 

# describe the prefill pods (looks the same as above)
prefill:
  replicas: 1
  containers:
  - name: "vllm"
    image: "ghcr.io/llm-d/llm-d:0.0.8"  
    command: 
      - vllm 
      - serve
    args:
      - "facebook/opt-125m"
      - "--port"
      - "8000"  # servicePort
      - "--enforce-eager"
      - "--kv-transfer-config"
      - '{"kv_connector":"NixlConnector", "kv_role":"kv_both"}'
    env:
      - name: CUDA_VISIBLE_DEVICES
        value: "0"
      - name: UCX_TLS
        value: "cuda_ipc,cuda_copy,tcp"
      - name: VLLM_NIXL_SIDE_CHANNEL_PORT
        value: "5557"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VLLM_LOGGING_LEVEL
        value: DEBUG
    ports:
      - containerPort: 8000
        protocol: TCP
      - containerPort: 5557
        protocol: TCP
    resources:
      limits:
        memory: 16Gi
        cpu: "16"
        nvidia.com/gpu: "1"
      requests:
        cpu: "16"
        memory: 16Gi
        nvidia.com/gpu: "1"
    
endpointPicker:
  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 9002
    targetPort: 9002
    appProtocol: http2
  role: pod-read
  
  autoscaling:
    enabled: false
  replicas: 1
